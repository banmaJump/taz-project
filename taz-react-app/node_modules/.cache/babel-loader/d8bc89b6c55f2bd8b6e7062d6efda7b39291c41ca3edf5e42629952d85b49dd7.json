{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hase\\\\Desktop\\\\Taz-Project\\\\taz-react-app\\\\src\\\\components\\\\PostsList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        let url = `${process.env.REACT_APP_API_BASE_URL}/api/posts`;\n        if (searchQuery) {\n          const params = new URLSearchParams({\n            query: searchQuery\n          });\n          url = `${process.env.REACT_APP_API_BASE_URL}/api/search?${params.toString()}`;\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch posts: ${response.status}`);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setPosts(data);\n        } else if (data && Array.isArray(data.posts)) {\n          setPosts(data.posts);\n        } else {\n          throw new Error('Invalid API response format');\n        }\n      } catch (err) {\n        setError(`Failed to fetch posts: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [searchQuery]);\n  const handleSearch = query => {\n    setSearchQuery(query);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"posts\",\n        children: [posts.length === 0 && searchQuery && /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u300C\", searchQuery, \"\\u300D\\u306B\\u4E00\\u81F4\\u3059\\u308B\\u691C\\u7D22\\u7D50\\u679C\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 59\n        }, this), posts.map(post => {\n          const postImageUrl = `${process.env.PUBLIC_URL}/images/${post.image_url}`;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"article\", {\n              children: [/*#__PURE__*/_jsxDEV(\"header\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: `/post/${post.id}`,\n                    children: post.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"time\", {\n                  className: \"published\",\n                  dateTime: post.published_at,\n                  children: new Date(post.published_at).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `/post/${post.id}`,\n                className: \"image\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: postImageUrl,\n                  alt: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(PostsList, \"FGPO3Ucx6YkQ9NT3bHXkNzpHK1A=\");\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["React","useState","useEffect","Header","jsxDEV","_jsxDEV","PostsList","_s","posts","setPosts","loading","setLoading","error","setError","searchQuery","setSearchQuery","fetchPosts","url","process","env","REACT_APP_API_BASE_URL","params","URLSearchParams","query","toString","response","fetch","ok","Error","status","data","json","Array","isArray","err","message","handleSearch","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","className","length","map","post","postImageUrl","PUBLIC_URL","image_url","href","id","title","dateTime","published_at","Date","toLocaleDateString","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/hase/Desktop/Taz-Project/taz-react-app/src/components/PostsList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\n\r\nconst PostsList = () => {\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            setLoading(true);\r\n            setError(null);\r\n            try {\r\n                let url = `${process.env.REACT_APP_API_BASE_URL}/api/posts`;\r\n                if (searchQuery) {\r\n                    const params = new URLSearchParams({ query: searchQuery });\r\n                    url = `${process.env.REACT_APP_API_BASE_URL}/api/search?${params.toString()}`;\r\n                }\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch posts: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                if (Array.isArray(data)) {\r\n                    setPosts(data);\r\n                } else if (data && Array.isArray(data.posts)) {\r\n                    setPosts(data.posts);\r\n                } else {\r\n                    throw new Error('Invalid API response format');\r\n                }\r\n            } catch (err) {\r\n                setError(`Failed to fetch posts: ${err.message}`);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPosts();\r\n    }, [searchQuery]);\r\n\r\n    const handleSearch = (query) => {\r\n        setSearchQuery(query);\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header onSearch={handleSearch} />\r\n            <section>\r\n                <ul className=\"posts\">\r\n                    {posts.length === 0 && searchQuery && <li>「{searchQuery}」に一致する検索結果はありません。</li>}\r\n                    {posts.map((post) => {\r\n                        const postImageUrl = `${process.env.PUBLIC_URL}/images/${post.image_url}`;\r\n                        return (\r\n                            <li key={post.id}>\r\n                                <article>\r\n                                    <header>\r\n                                        <h3><a href={`/post/${post.id}`}>{post.title}</a></h3>\r\n                                        <time className=\"published\" dateTime={post.published_at}>\r\n                                            {new Date(post.published_at).toLocaleDateString()}\r\n                                        </time>\r\n                                    </header>\r\n                                    <a href={`/post/${post.id}`} className=\"image\">\r\n                                        <img src={postImageUrl} alt={post.title} />\r\n                                    </a>\r\n                                </article>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostsList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}